package pkg

import java.util.Iterator
import kotlin.jvm.internal.Ref.IntRef
import kotlin.jvm.internal.Ref.ObjectRef

open class TestNonInlineLambda {
   public final var intField: Int
      internal set
   private final var privateIntField: Int
   private final var privateStringField: String = ""
   public final var stringField: String = ""
      internal set


   public fun testCaptureInt(x: Int) {
      this.execute(new <undefinedtype>(x));// 7 8
   }// 11

   public fun testCaptureObject(x: String) {
      this.execute(new <undefinedtype>(x));// 14 15
   }// 18

   public fun testCaptureIntIterationValue(x: Iterable<Int>) {
      var var2: Iterator = x.iterator();// 21

      while (var2.hasNext()) {
         this.execute(new <undefinedtype>((var2.next() as java.lang.Number).intValue()));// 22
      }
   }// 26

   public fun testCaptureObjectIterationValue(x: Iterable<String>) {
      for (java.lang.String i : x) {// 29
         this.execute(new <undefinedtype>(i));// 30
      }
   }// 34

   public fun testCaptureMutableInt(x: Int) {
      var y: IntRef = new IntRef();// 37
      y.element = x;
      this.execute(new <undefinedtype>(y));// 38
      var var3: Int = y.element++;// 41
      this.execute(new <undefinedtype>(y));// 42
      y.element *= 500;// 45
      this.execute(new <undefinedtype>(y));// 46
      y.element = 100;// 49
      this.execute(new <undefinedtype>(y));// 50
      y.element += x;// 53
      this.execute(new <undefinedtype>(y));// 54
   }// 57

   public fun testCaptureMutableObject(x: String) {
      var y: ObjectRef = new ObjectRef();// 60
      y.element = x;
      this.execute(new <undefinedtype>(y));// 61
      y.element = y.element + "!!";// 64
      this.execute(new <undefinedtype>(y));// 65
      y.element = "" + y.element + y.element + y.element;// 68
      this.execute(new <undefinedtype>(y));// 69
      y.element = "Hello: ";// 72
      this.execute(new <undefinedtype>(y));// 73
      y.element = y.element + x;// 76
      this.execute(new <undefinedtype>(y));// 77
   }// 80

   public fun testCaptureAndMutateInt(x: Int) {
      var y: IntRef = new IntRef();// 83
      this.execute(new <undefinedtype>(y));// 84
      y.element = 5 + x;// 89
      this.execute(new <undefinedtype>(y));// 90
   }// 95

   public fun testCaptureAndMutateString(x: String) {
      var y: ObjectRef = new ObjectRef();// 98
      y.element = "";
      this.execute(new <undefinedtype>(y));// 99
      y.element = "Hello: " + x;// 105
      this.execute(new <undefinedtype>(y));// 106
   }// 112

   public fun testCapturePublicMutableIntField() {
      this.execute(new <undefinedtype>(this));// 117
   }// 118

   public fun testCapturePublicMutableStringField() {
      this.execute(new <undefinedtype>(this));// 123
   }// 124

   public fun testCapturePrivateMutableIntField() {
      this.execute(new <undefinedtype>(this));// 129
   }// 130

   public fun testCapturePrivateMutableStringField() {
      this.execute(new <undefinedtype>(this));// 135
   }// 136

   public open fun execute(block: () -> Unit) {
   }// 141

   @JvmStatic
   @JvmSynthetic
   fun `access$getPrivateIntField$p`(`$this`: TestNonInlineLambda): Int {
      return `$this`.privateIntField;
   }

   @JvmStatic
   @JvmSynthetic
   fun `access$setPrivateIntField$p`(`$this`: TestNonInlineLambda, var1: Int) {
      `$this`.privateIntField = var1;
   }

   @JvmStatic
   @JvmSynthetic
   fun `access$setPrivateStringField$p`(`$this`: TestNonInlineLambda, var1: java.lang.String) {
      `$this`.privateStringField = var1;
   }

   @JvmStatic
   @JvmSynthetic
   fun `access$getPrivateStringField$p`(`$this`: TestNonInlineLambda): java.lang.String {
      return `$this`.privateStringField;// 3
   }
}

class 'pkg/TestNonInlineLambda' {
   method 'testCaptureInt (I)V' {
      0      16
      2      16
      7      16
      b      16
      c      16
      d      16
      e      16
      f      16
      10      16
      11      17
   }

   method 'testCaptureObject (Ljava/lang/String;)V' {
      6      20
      8      20
      d      20
      11      20
      12      20
      13      20
      14      20
      15      20
      16      20
      17      21
   }

   method 'testCaptureIntIterationValue (Ljava/lang/Iterable;)V' {
      6      24
      7      24
      8      24
      9      24
      a      24
      b      24
      c      24
      d      26
      e      26
      f      26
      10      26
      11      26
      12      26
      16      27
      17      27
      18      27
      19      27
      1a      27
      1b      27
      1c      27
      1d      27
      1e      27
      1f      27
      20      27
      21      27
      23      27
      28      27
      2c      27
      2d      27
      2e      27
      2f      27
      30      27
      31      27
      35      29
   }

   method 'testCaptureObjectIterationValue (Ljava/lang/Iterable;)V' {
      6      32
      7      32
      8      32
      9      32
      a      32
      b      32
      c      32
      16      32
      17      32
      18      32
      19      32
      1a      32
      1b      32
      1c      32
      1d      32
      1e      32
      1f      32
      20      33
      25      33
      29      33
      2a      33
      2b      33
      2c      33
      2d      33
      2e      33
      32      35
   }

   method 'testCaptureMutableInt (I)V' {
      7      38
      8      39
      9      39
      a      39
      b      39
      c      39
      d      40
      12      40
      16      40
      17      40
      18      40
      19      40
      1a      40
      1b      40
      1c      41
      1d      41
      1e      41
      1f      41
      20      41
      24      41
      28      42
      2d      42
      31      42
      32      42
      33      42
      34      42
      35      42
      36      42
      37      43
      3c      43
      3d      43
      3e      43
      40      43
      41      43
      42      43
      43      44
      48      44
      4c      44
      4d      44
      4e      44
      4f      44
      50      44
      51      44
      52      45
      53      45
      54      45
      55      45
      56      45
      57      45
      58      46
      5d      46
      61      46
      62      46
      63      46
      64      46
      65      46
      66      46
      67      47
      6c      47
      6e      47
      6f      47
      70      47
      71      48
      76      48
      7a      48
      7b      48
      7c      48
      7d      48
      7e      48
      7f      48
      80      49
   }

   method 'testCaptureMutableObject (Ljava/lang/String;)V' {
      d      52
      e      53
      f      53
      10      53
      11      53
      12      53
      13      54
      18      54
      1c      54
      1d      54
      1e      54
      1f      54
      20      54
      21      54
      22      55
      23      55
      24      55
      25      55
      26      55
      27      55
      28      55
      29      55
      2a      55
      2b      55
      2c      55
      2d      55
      2e      55
      2f      56
      34      56
      38      56
      39      56
      3a      56
      3b      56
      3c      56
      3d      56
      3e      57
      3f      57
      40      57
      41      57
      42      57
      43      57
      44      57
      45      57
      46      57
      47      57
      48      57
      49      57
      4a      57
      4b      57
      4c      57
      4d      57
      4e      57
      4f      57
      50      57
      51      57
      52      57
      53      58
      58      58
      5c      58
      5d      58
      5e      58
      5f      58
      60      58
      61      58
      62      59
      63      59
      64      59
      65      59
      66      59
      67      59
      68      60
      6d      60
      71      60
      72      60
      73      60
      74      60
      75      60
      76      60
      77      61
      78      61
      79      61
      7a      61
      7b      61
      7c      61
      7d      61
      7e      61
      7f      61
      80      61
      81      61
      82      61
      83      61
      84      61
      85      62
      8a      62
      8e      62
      8f      62
      90      62
      91      62
      92      62
      93      62
      94      63
   }

   method 'testCaptureAndMutateInt (I)V' {
      7      66
      8      67
      d      67
      11      67
      12      67
      13      67
      14      67
      15      67
      16      67
      17      68
      18      68
      19      68
      1a      68
      1b      68
      1c      68
      1d      68
      1e      69
      23      69
      27      69
      28      69
      29      69
      2a      69
      2b      69
      2c      69
      2d      70
   }

   method 'testCaptureAndMutateString (Ljava/lang/String;)V' {
      d      73
      e      74
      f      74
      10      74
      11      74
      12      74
      13      74
      14      75
      19      75
      1d      75
      1e      75
      1f      75
      20      75
      21      75
      22      75
      23      76
      24      76
      25      76
      26      76
      27      76
      28      76
      29      76
      2a      76
      2b      76
      2c      76
      2d      77
      32      77
      36      77
      37      77
      38      77
      39      77
      3a      77
      3b      77
      3c      78
   }

   method 'testCapturePublicMutableIntField ()V' {
      0      81
      5      81
      9      81
      a      81
      b      81
      c      81
      d      81
      e      81
      f      82
   }

   method 'testCapturePublicMutableStringField ()V' {
      0      85
      5      85
      9      85
      a      85
      b      85
      c      85
      d      85
      e      85
      f      86
   }

   method 'testCapturePrivateMutableIntField ()V' {
      0      89
      5      89
      9      89
      a      89
      b      89
      c      89
      d      89
      e      89
      f      90
   }

   method 'testCapturePrivateMutableStringField ()V' {
      0      93
      5      93
      9      93
      a      93
      b      93
      c      93
      d      93
      e      93
      f      94
   }

   method 'execute (Lkotlin/jvm/functions/Function0;)V' {
      6      97
   }

   method 'access$getPrivateIntField$p (Lpkg/TestNonInlineLambda;)I' {
      0      102
      1      102
      2      102
      3      102
      4      102
   }

   method 'access$setPrivateIntField$p (Lpkg/TestNonInlineLambda;I)V' {
      0      108
      1      108
      2      108
      3      108
      4      108
      5      109
   }

   method 'access$setPrivateStringField$p (Lpkg/TestNonInlineLambda;Ljava/lang/String;)V' {
      0      114
      1      114
      2      114
      3      114
      4      114
      5      115
   }

   method 'access$getPrivateStringField$p (Lpkg/TestNonInlineLambda;)Ljava/lang/String;' {
      0      120
      1      120
      2      120
      3      120
      4      120
   }
}

Lines mapping:
3 <-> 121
7 <-> 17
8 <-> 17
11 <-> 18
14 <-> 21
15 <-> 21
18 <-> 22
21 <-> 25
22 <-> 28
26 <-> 30
29 <-> 33
30 <-> 34
34 <-> 36
37 <-> 39
38 <-> 41
41 <-> 42
42 <-> 43
45 <-> 44
46 <-> 45
49 <-> 46
50 <-> 47
53 <-> 48
54 <-> 49
57 <-> 50
60 <-> 53
61 <-> 55
64 <-> 56
65 <-> 57
68 <-> 58
69 <-> 59
72 <-> 60
73 <-> 61
76 <-> 62
77 <-> 63
80 <-> 64
83 <-> 67
84 <-> 68
89 <-> 69
90 <-> 70
95 <-> 71
98 <-> 74
99 <-> 76
105 <-> 77
106 <-> 78
112 <-> 79
117 <-> 82
118 <-> 83
123 <-> 86
124 <-> 87
129 <-> 90
130 <-> 91
135 <-> 94
136 <-> 95
141 <-> 98
